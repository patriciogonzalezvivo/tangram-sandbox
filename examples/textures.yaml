# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-JUsa0Gc
cameras:
    perspective:
        type: flat
lights:
    # directional1:
    #     type: directional
    #     direction: [0.2, 0.7, -0.5]
    #     diffuse: [1., 1., 1.]
    point_light:
        type: point
        origin: world
        position: [0,58,14900000]
        specular: [0.980, 0.980, 0.980]
        diffuse: [1., 1., 1.]
styles:
    geometry-matrices:
        defines:
            PI: 3.14159265358979323846
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
                    //
                    // Scale 4 dimensions
                    // ================================
                    mat4 scale4D (float x, float y, float z) {
                        return mat4(
                            vec4(x,   0.0, 0.0, 0.0),
                            vec4(0.0, y,   0.0, 0.0),
                            vec4(0.0, 0.0, z,   0.0),
                            vec4(0.0, 0.0, 0.0, 1.0)
                        );
                    }
                    //
                    // Translate in 4 dimensions
                    mat4 translate4D (float x, float y, float z) {
                        return mat4(
                            vec4(1.0, 0.0, 0.0, 0.0),
                            vec4(0.0, 1.0, 0.0, 0.0),
                            vec4(0.0, 0.0, 1.0, 0.0),
                            vec4(x,   y,   z,   1.0)
                        );
                    }
    geometry-projection:
        shaders:
            defines:
                EARTH_RADIUS: 6378137.0
                PI: 3.14159265358979323846
                HALF_PI: 1.570796327
                QUATER_PI: .785398163
                deg2rad(d): (((d)*3.14159265358979323846)/180.0)
                rad2deg(d): (((d)*180.0)/3.14159265358979323846)
            blocks:
                global: |
                    //
                    //    The following functions take or return there results in degrees
                    //    http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_d (float y) { return rad2deg(2.0*atan(exp(deg2rad(y)))-HALF_PI); }
                    float x2lon_d (float x) { return x; }
                    float lat2y_d (float lat) { return rad2deg(log(tan(QUATER_PI+ deg2rad(lat)/2.0))); }
                    float lon2x_d (float lon) { return lon; }
                    //
                    //    The following functions take or return there results in something close to meters, along the equator 
                    //    http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_m (float y) { return rad2deg(2.0*atan(exp((y/EARTH_RADIUS)))-HALF_PI); }
                    float x2lon_m (float x) { return rad2deg(x/EARTH_RADIUS); }
                    float lat2y_m (float lat) { return EARTH_RADIUS*log(tan(QUATER_PI+ deg2rad(lat)/2.0)); }
                    float lon2x_m (float lon) { return deg2rad(lon)*EARTH_RADIUS; }
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                }else{
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    textures:
        base: polygons
        mix: [geometry-projection,geometry-matrices,functions-map]
        animated: true
        shaders:
            uniforms:
                u_height_map: imgs/earth-elevation.jpg
                u_normal_map: imgs/earth-normals.jpg
                u_cloud_map: imgs/earth-clouds.jpg
                u_day_map: imgs/earth-texture-day.jpg
                u_night_map: imgs/earth-texture-night.jpg
            blocks:
                normal: |
                    float alpha = pow(1.-map(u_map_position.z,3.,5.,0.,1.),5.0);
                    vec2 st = u_map_position.xy+v_position.xy;
                    vec2 pos = vec2(y2lat_m(st.y),x2lon_m(st.x));
                    mat3 sphere = rotateY3D(deg2rad(pos.y)) * rotateX3D(deg2rad(pos.x));
                    normal = mix(normal,sphere * normal,alpha);
                    pos /= vec2(90.,180.); // Normalize
                    pos = (pos+1.)*.5; // re-map between 0.0 and 1.0
                    normal += (texture2D(u_normal_map,fract(pos.yx)).rgb*2.-1.)*alpha;
                color: |
                    point_light.position.x = cos(u_time*0.4)*99999999.*alpha;
                    vec4 night = texture2D(u_night_map,fract(pos.yx));
                    vec4 day = texture2D(u_day_map,fract(pos.yx));
                    // color += texture2D(u_height_map,fract(pos.yx));
                filter: |
                    color = mix(color,mix(night,day,light_accumulator_diffuse.r),alpha);
                    float clouds = texture2D(u_cloud_map,fract(pos.yx+vec2(u_time,sin(u_time))*.001 ) ).r;
                    color = mix(color,mix(color-clouds,color+clouds,light_accumulator_diffuse.r),alpha);
    earth_texture:
        mix: textures
        material: 
            specular: black
    water_texture:
        material: 
            specular: white
layers:
    earth:
        data: { source: osm }
        draw:
            textures:
                order: 0
                color: '#555'
    water:
        data: { source: osm }
        draw:
            textures:
                order: 1
                color: '#ddd'
    boundaries:
        data: { source: osm }
        draw:
            lines:
                order: 3
                color: white
                width: [[2,0px],[5,1px]]
    roads:
        data: { source: osm }
        properties: { width: 3 }
        draw:
            lines:
                order: 4
                color: '#ddd'
                width: [[5, .25px],[15, .5px],[85, 10]]