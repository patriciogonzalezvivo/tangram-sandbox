cameras:
    perspective:
        type: flat
sources:
    osm:
        type: TopoJSONTiles
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson?
        url_params:
            api_key: vector-tiles-x4i7gmA
styles:
    tools:
        shaders:
            blocks:
                global: |
                    varying vec3 v_pos;
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}
                position: |
                    v_pos = a_position.xyz * 32767.;
    splatter:
        base: polygons
        mix: tools
        animated: true
        shaders:
            blocks:
                global: |
                    vec3 random3(vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }

                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise(vec3 p) {

                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));

                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);

                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;

                        vec4 w, d;

                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);

                        w = max(0.6 - w, 0.0);

                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);

                        w *= w;
                        w *= w;
                        d *= w;

                        return dot(d, vec4(52.0));
                    }
                color: |
                    vec2 st = TileCoords()*10.;
                    
                    float t = 1.;

                    color.rgb = vec3(0.163,0.142,0.206)*0.4;
                    color.rgb += vec3(0.965,0.475,0.267)*step(.35, snoise( vec3(st*30.,t*6.+3232.0) ) );
                    color.rgb += vec3(0.671,0.196,0.188)*step(.35, snoise( vec3(st*10.,t*2.+123.0) ) );
                    color.rgb += vec3(0.502,0.576,0.737)* step(.35, snoise( vec3(st*2.,t+0.0) ) );
                    color.rgb += vec3(0.898,0.886,0.890)*step(.5, snoise( vec3(st*2.,t+0.0) ) );
                    
                    
                    // color.rgb = mix(color.rgb, vec3(0.965,0.475,0.267), step(.35, snoise( vec3(st*30.,t*6.+3232.0) ) ));
                    // color.rgb = mix(color.rgb, vec3(0.671,0.196,0.188), step(.35, snoise( vec3(st*10.,t*2.+123.0) ) ));
                    // color.rgb = mix(color.rgb, vec3(0.502,0.576,0.737), step(.35, snoise( vec3(st*2.,t+0.0) ) ));
                    // color.rgb = mix(color.rgb, vec3(0.898,0.886,0.890), step(.5, snoise( vec3(st*2.,t+0.0) ) ));
layers:
    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 0
                color: '#555'
    water:
        data: { source: osm }
        draw:
            splatter:
                order: 1
                color: '#ddd'