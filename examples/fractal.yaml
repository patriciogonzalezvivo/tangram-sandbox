cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
styles:
    buildings:
        base: polygons
        texcoords: true
        animated: true
        shaders:
            blocks:
                global: |
                    float random(in float x){ return fract(sin(x)*43758.5453); }
                    float random(in vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }
                    
                    vec2 tileFractal(vec2 st, int scale) {
                        for (int i = 0; i < 3; i++){
                            st *= float(scale);
                            vec2 i_st = floor(st);
                            st = fract(st*pow(2., floor(2.*random(i_st))) );
                        }
                        return st;
                    }

                    float grid(vec2 st, float res){
                        vec2 grid = fract(st*res);
                        return 1.-(step(res,grid.x) * step(res,grid.y));
                    }
                    
                    float circle(vec2 st, float radius){
                        vec2 pos = vec2(0.5)-st;
                        radius *= 0.75;
                        return 1.-smoothstep(radius-(radius*0.05),radius+(radius*0.05),dot(pos,pos)*3.14);
                    }

                    float box(vec2 st, vec2 size){
                        size = vec2(0.5)-size*0.5;
                        vec2 uv = smoothstep(size,size+vec2(1e-4),st);
                        uv *= smoothstep(size,size+vec2(1e-4),vec2(1.0)-st);
                        return uv.x*uv.y;
                    }
                color: |
                    vec2 st = vec2(v_texcoord.x*.1,worldPosition().z*0.001);
                    
                    if (dot(v_normal,vec3(.0,.0,.1)) != 0.) {
                        st = worldPosition().xy*0.001;
                    }
                    st = tileFractal(st,4);
                    
                    float pct = 0.;
                    pct = circle(st,.999);
                    // pct = box(st,vec2(.95));
                    
                    vec3 col = vec3(0.0);
                    color.rgb *= col;
                    color.rgb += vec3(1.)*pct;
sources:
    osm:
        type: TopoJSON
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-P6dkVl4
layers:
    water:
        data: { source: osm }
        draw:
            polygons:
                order: 2
                color: '#353535'
    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 0
                color: '#555'
    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: 1
                color: '#666'
    roads:
        data: { source: osm }
        properties: { width: 3 }
        draw:
            lines:
                order: 2
                color: '#777'
                width: 5
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 14 } }
        draw:
            polygons:
                order: 50
                color: '#999'
        extruded:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }