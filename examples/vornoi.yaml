cameras:
    perspective:
        type: isometric
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
styles:
    tools:
        shaders: 
            blocks: 
                global: |
                    float random(float x) {
                        return fract(sin(x)*1e4);
                    }
                    vec2 random2( vec2 p ) {
                        return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
                    }
                    
                    // Value Noise by Inigo Quilez - iq/2013
                    // https://www.shadertoy.com/view/lsf3WH
                    float noise(vec2 st) {
                        vec2 i = floor(st);
                        vec2 f = fract(st);

                        vec2 u = f*f*(3.0-2.0*f);

                        return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                                         dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                                    mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                                         dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
                    }

                    // Created by inigo quilez - iq/2013
                    // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
                    // http://www.iquilezles.org/www/articles/voronoilines/voronoilines.htm
                    // #define ANIMATE
                    vec3 voronoi( in vec2 x ) {
                        vec2 n = floor(x);
                        vec2 f = fract(x);
                        vec2 mg, mr;
                        float md = 8.0;
                        for (int j=-1; j<=1; j++ ) {
                            for (int i=-1; i<=1; i++ ) {
                                vec2 g = vec2(float(i),float(j));
                                vec2 o = random2( n + g );
                                #ifdef ANIMATE
                                o = 0.5 + 0.5*sin( u_time + 6.2831*o );
                                #endif  
                                vec2 r = g + o - f;
                                float d = dot(r,r);

                                if( d<md ) {
                                    md = d;
                                    mr = r;
                                    mg = g;
                                }
                            }
                        }
                        md = 8.0;
                        for (int j=-2; j<=2; j++ ) {
                            for (int i=-2; i<=2; i++ ) {
                                vec2 g = mg + vec2(float(i),float(j));
                                vec2 o = random2( n + g );
                                #ifdef ANIMATE
                                o = 0.5 + 0.5*sin( u_time + 6.2831*o );
                                #endif  
                                vec2 r = g + o - f;

                                if( dot(mr-r,mr-r)>0.00001 )
                                md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );
                            }
                        }
                        return vec3( md, mr );
                    }  
    buildings:
        base: polygons
        animated: true
        mix: tools
        shaders:
            blocks:
                global: |
                    mat3 rotateX3D(float phi){
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D(float theta){
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D(float psi){
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    float t = u_time*0.001;
                    // color.rgb += vec3(cos(t)*.1, sin(t)*.1, 0.1); 
                    vec3 pos = worldPosition().xyz*0.005;
                    pos *= rotateX3D(color.r) * rotateY3D(color.g) * rotateZ3D(color.b);
                    
                    float w = 0.005;//.001+random(v_color.b)*0.03;//+min((worldPosition().z*.000000001),.2);
                    float s = 1.;//0.7+random(v_color.g)*2.;
                    vec3 c = voronoi( 8.0*pos.xy*s );
                    
                    color.rgb = vec3(.5);
                    color.rgb += smoothstep(w+0.001, w+0.01, c.x);
                    
                    float dd = length( c.yz );
                    color.rgb = mix(color.rgb,vec3(1.,.0,.0),(1.0-smoothstep( .0, .05, dd)));
                    
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
    ground:
        base: polygons
        mix: tools
        shaders: 
            blocks: 
                color: |
                    vec3 pos = worldPosition().xyz*0.005;
                    float s = 1.;
                    float w = 0.005;
                    vec3 c = voronoi( 8.0*pos.xy );
                    color.rgb *= smoothstep(w+0.001, w+0.01, c.x);
sources:
    osm:
        type: TopoJSON
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-P6dkVl4
layers:
    water:
        data: { source: osm }
        draw:
            ground:
                order: 2
                color: '#353535'
    earth:
        data: { source: osm }
        draw:
            ground:
                order: 0
                color: '#555'
    landuse:
        data: { source: osm }
        draw:
            ground:
                order: 1
                color: '#666'
    roads:
        data: { source: osm }
        properties: { width: 3 }
        draw:
            lines:
                order: 2
                color: '#777'
                width: 5
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 14 } }
        draw:
            polygons:
                order: 50
                color: Style.color.pseudoRandomColor()
            lines:
                order: 51
                width: .5px
                color: gray
        extruded:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }
                lines:
                    style: lines
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }