# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 400px]
        origin: ground
        ambient: .5
        diffuse: .3
        specular: .2

styles:
    tilt:
        animated: true
        base: polygons
        shaders:
            blocks:
                global: |
                    mat3 rotateX3D(float phi){
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateZ3D(float psi){
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                position: |
                    float t = u_time*0.05; 
                    position.xyz = rotateX3D(abs(cos(t))) * rotateZ3D(abs(sin(t))*.5) * position.xyz;
    lego:
        mix: tilt
        material:
            ambient: 0.8
            diffuse: 0.8
            specular: 0.4
        shaders:
            blocks:
                global: |
                    float box(vec2 _st, vec2 _size){
                        _size = vec2(0.5)-_size*0.5;
                        vec2 uv = smoothstep(_size-vec2(0.0001),_size,_st);
                        uv *= smoothstep(_size-vec2(0.0001),_size,vec2(1.0)-_st);
                        return uv.x*uv.y;
                    }
                    float circle(vec2 _st, float _radius){
                      vec2 pos = vec2(0.5)-_st;
                      _radius *= 0.75;
                      return 1.-smoothstep(_radius-(_radius*0.01),_radius+(_radius*0.01),dot(pos,pos)*3.14);
                    }
                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }
                    float random(in vec2 _st){
                        return fract(sin(dot(_st.xy,vec2(12.9898,78.233)))* 43758.5453123);
                    }
                    vec3 legoPattern(inout vec2 st){
                        st *= 5.0;
                        vec3 normal = vec3(0.0);
                        vec2 ivec = floor(st);
                        vec2 fvec = fract(st);
                        vec2 pos = fvec;
                        float index = random(ivec);
                        if(index > 0.5){
                          normal.x = step(0.5,pos.y)*2.-1.;
                          normal *= (1.0-vec3(box(fvec,vec2(1.0,0.95))));
                        } else {
                          normal.y = step(0.5,pos.x)*2.-1.;
                          normal *= (1.0-vec3(box(fvec,vec2(0.95,1.))));
                        }
                        st = fvec;
                        return normal;
                    }
    floor:
        base: polygons
        mix: lego
        shaders:
            blocks:
                normal: |
                    vec2 st = fract(worldPosition().xy*0.0175);
                    normal = legoPattern(st);
                    st = tile(st,2.);
                    vec2 pos = st-0.5;
                    float a = atan(pos.y,pos.x);
                    normal += vec3(cos(a),sin(a),0.)*circle(st,0.4);
                    normal *= 1.0-circle(st,0.26);
                    normal.b = 1.0;
    roads:
        base: lines
        mix: lego
        shaders:
            blocks:
                normal: |
                    vec2 st = fract(worldPosition().xy*0.0175);
                    normal = legoPattern(st);
                    st = tile(st,2.);
                    vec2 pos = st-0.5;
                    float a = atan(pos.y,pos.x);
                    normal += vec3(cos(a),sin(a),0.)*circle(st,0.4);
                    normal *= 1.0-circle(st,0.26);
                    normal.b = 1.0;
    buildings:
        base: polygons
        mix: lego
        shaders:
            blocks:
                global: |
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }
                    float random(float x){
                        return fract(sin(x)*43758.5453123);
                    }
                normal: |
                    vec2 st = fract(worldPosition().xy*0.0175);
                    normal = legoPattern(st);
                    st = tile(st,2.);
                    vec2 pos = st-0.5;
                    float a = atan(pos.y,pos.x);
                    normal += vec3(cos(a),sin(a),0.)*circle(st,0.4);
                    normal *= 1.0-circle(st,0.26);
                    normal.b = 1.0;
                    if ( dot(v_normal,vec3(0.,0.,1.)) == 0.0 ){
                        // Roofs
                        st = fract(worldPosition().xy*0.0175);
                        float z = worldPosition().z*0.07;
                        pos = st-0.5;
                        if (fract(z * 0.5) > 0.5){
                            normal = v_normal + legoPattern(st);
                        } else {
                            normal = v_normal;
                        }
                        float p = fract(z);
                        float size = 0.92;
                        size = 0.5-size*0.5;
                        normal.z = (smoothstep(size,size+0.0001,p) * smoothstep(size,size+0.0001,1.0-p));
                    }
                color: |
                    float b = random(getBrightness(color.rgb));
                    if (b > 0.8){
                        color.rgb = vec3(0.918,0.196,0.133);
                    } else if(b > 0.6){
                        color.rgb = vec3(0.996,0.835,0.000);
                    } else if(b > 0.4){
                        color.rgb = vec3(0.016,0.341,0.651);
                    } else if(b > 0.2){
                        color.rgb = vec3(0.278,0.341,0.396);
                    } else {
                        color.rgb = vec3(0.400,0.176,0.180);
                    }
                    color *= clamp(0.6+worldPosition().z*0.007,0.,1.);
sources:
    osm:
        type: TopoJSON
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-JUsa0Gc
layers:
    earth:
        data:
            source: osm
            layer: earth
        draw:
            floor:
                order: 0
                color: [0.094,0.573,0.255]
    landuse:
        data:
            source: osm
            layer: landuse
        draw:
            floor:
                order: 1
                color: white

    water:
        data:
            source: osm
            layer: water
        draw:
            floor:
                order: 2
                color: [0.016,0.341,0.651]

    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: 4
                color: gray
                width: 8
            outline:
                order: 3
                style: roads
        highway:
            filter:
                kind: highway
            draw:
                roads:
                    color: black
                    width: 12
                outline:
                    color: grey
                    width: 15
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                roads:
                    color: black
            rail:
                filter:
                    kind: rail
                draw:
                    roads:
                        width: 0
        minor_road:
            filter:
                kind: minor_road
            draw:
                roads:
                    order: 3
                    color: lightgrey
                    width: 5
        path:
            filter:
                kind: path
            draw:
                roads:
                    color: [0.8, 0.8, 0.8]
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                roads:
                    color: black
                    width: 3
    buildings:
        data:
            source: osm
            layer: buildings
        draw:
            buildings:
                order: 6
                color: Style.color.pseudoRandomColor
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                buildings:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }