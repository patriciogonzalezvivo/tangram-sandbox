# Author @patriciogv - 2015

import:
    - default.yaml
    - https://tangrams.github.io/blocks/color/tools.yaml
    - https://tangrams.github.io/blocks/generative/random.yaml
    - https://tangrams.github.io/blocks/geometry/matrices.yaml
    - https://tangrams.github.io/blocks/tiling/tile.yaml
    - https://tangrams.github.io/blocks/tiling/brick.yaml
    - https://tangrams.github.io/blocks/shapes/circle.yaml

textures:
    matress:
        url: imgs/normal-0001.jpg

lights:
    dir:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    pnt:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

layers:
    water:
        data: { source: mapzen }
        draw:
            water:
                order: global.order
                color: '#88bbee'
    earth:
        data: { source: mapzen }
        draw:
            earth:
                order: global.order
                color: '#ddeeee'
    landuse:
        data: { source: mapzen }
        draw:
            landuse:
                order: global.order
                color: [0.502,0.369,0.494]
    roads:
        data: { source: mapzen }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: global.order
                color: gray
                width: 8
    buildings:
        data: { source: mapzen }
        draw:
            buildings:
                order: global.order
                color: global.pseudoRandomColor
                extrude: true
    places:
        data: { source: mapzen }
        draw:
            text:
                font:
                    family: helvetica
                    size: 18px
                    weight: bold
                    fill: [0.232,0.170,0.229]
                    stroke: { color: white , width: 3 }
styles:
    floor:
        material:
            normal:
                texture: matress
                mapping: planar
                scale: 0.02
            ambient: 0.8
            diffuse: 1
            specular: 0
    water:
        base: polygons
        mix: floor
    earth:
        base: polygons
        mix: floor
    landuse:
        base: polygons
        mix: floor
    roads:
        base: lines
        mix: floor
        lighting: true
    buildings:
        base: polygons
        mix: [color-tools, generative-random, geometry-matrices, tiling-tile, tiling-brick, shapes-circle]
        texcoords: true
        material:
            normal:
                texture: matress
                mapping: triplanar
                scale: 0.02
            ambient: 0.8
            diffuse: 1
            specular: 0
        shaders:
            blocks:
                global: |
                    float shape (float _radius, float _shape) {
                      return 1.-smoothstep(_shape-(_shape*0.01),_shape+(_shape*0.01),_radius);
                    }

                    float nuts(in vec2 st) {
                        float rows = 10.0;
                        vec2 pos = brick(st, rows);
                        float angle = PI*0.25;

                        if (fract(st.y * 0.5 * rows) > 0.5) {
                            angle *= -1.0;
                        }


                        pos *= 2.0;
                        pos -= 1.;
                        pos = rotate2D(angle) * pos;
                        pos += 1.;

                        float pct = (1.0+cos(PI*pos.x))*0.5;
                        return clamp(1.0-smoothstep( 0.5,0.6, pow(pct,pos.y))*1.0-smoothstep(0.79,0.81,pow(pct,2.0-pos.y)),0.0,1.0);
                    }

                    float flower(in vec2 st){
                        vec2 pos = vec2(0.5)-st;

                        float r = length(pos)*2.0;
                        float a = atan(pos.y,pos.x);

                        float shape1 = 0.5-0.2*cos(a*5.0);
                        float shape2 = 0.15-0.03*cos(a*5.0);

                        float pct = shape(r, shape1);
                        pct -= shape(r, shape2);
                        pct += circle(st, 0.0005);

                        return pct;
                    }

                    float snowFlake(in vec2 st){
                        vec2 pos = vec2(0.5)-st;

                        float r = length(pos)*2.0;
                        float a = atan(pos.y,pos.x);

                        float f = abs(cos(a*12.)*sin(a*3.))*.6+0.15;

                        return 1.0-shape(r,f);
                    }

                    float stripes(in vec2 pos, float angle, float brigtness){
                        float scale = 20.0;
                        pos *= scale;
                        pos = rotate2D(angle) * pos;
                        return 1.0-smoothstep(-1.+brigtness*2.0,1.,abs(sin(pos.x*PI)));
                    }

                color: |
                    float b = random(getBrightness(color.rgb));

                    vec2 st = v_texcoord;
                    if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                        st = fract(worldPosition().xy*0.05);
                    }
                    float pattern = 0.0;

                    if (b > 0.85){
                        pattern = nuts(st);
                    } else if (b > 0.75){
                        st = brick(st,4.);
                        pattern = flower(st);
                    } else if (b > 0.6){
                        st = brick(st,3.);
                        pattern = snowFlake(st);
                    } else if (b > 0.4){
                        pattern = stripes(st, PI*0.25, 0.25);
                    } else if (b > 0.2){
                        pattern = 1.0-stripes(st, -PI*0.25, 0.25);
                    } else {
                        st = tile(st,5.);
                        pattern = 1.0-circle(st,0.1);
                    }

                    color.rgb = mix(vec3(1.),color.rgb,pattern);