# Author @patriciogv - 2015
import:
    - https://tangrams.github.io/blocks/global.yaml
    - https://tangrams.github.io/blocks/color/tools.yaml
    - https://tangrams.github.io/blocks/functions/aastep.yaml
    - https://tangrams.github.io/blocks/functions/zoom.yaml
    - https://tangrams.github.io/blocks/geometry/normal.yaml
    - https://tangrams.github.io/blocks/geometry/tilt.yaml
    - https://tangrams.github.io/blocks/geometry/rotation.yaml
    - https://tangrams.github.io/blocks/generative/random.yaml
    - https://tangrams.github.io/blocks/space/tile.yaml
    
sources:
    mapzen:
        type: TopoJSON
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-xOfUOo4

cameras:
    camera:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

scene:
    background:
        color: black

layers:
    earth:
        data: { source: mapzen }
        draw:
            simpleGrid:
                order: global.order
                color: [0.362,0.362,0.362]
    landuse:
        data: { source: mapzen }
        draw:
            lin:
                order: global.order
                color: [0.703,0.703,0.703]
                width: 1px
    water:
        data: { source: mapzen }
        draw:
            numericGrid:
                order: global.order
                color: [1.000,1.000,1.000]
            outline:
                order: global.order_sub_1
                style: lin
                color: [1.000,1.000,1.000]
                width: 2px
                tile_edges: false
    roads:
        data: { source: mapzen }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: global.order
                color: [0, 0, 0]
                width: [[5,0px],[10,1px],[17, 8m]]
        highway:
            filter: { kind: highway }
            draw:
                roads:
                    width: [[8,0px], [9,.25px], [10, 1.5px], [14, 2px], [16, 4px], [20, 14m]]
                    outline:
                        style: lin
                        order: global.order_sub_1
                        width: [[8,0px], [9,.125px], [11, .575px], [14, 1px], [16, 2px], [17, 1m]]
                        color: [[17,[.5,.5,.5]],[20,[0,0,0]]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    roads:
                        width: [[8,0px], [14, 3px], [16, 5px], [20, 14m]]
                        outline:
                            width: [[8,0px], [14, .5px], [16, 1px], [17, .5m]]
                            color: [[17,[.5,.5,.5]],[20,[0,0,0]]]
                            style: lin
                            order: global.order_sub_1
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
        tunnel:
            filter: {is_tunnel: true }
            draw:
                roads:
                    width: [[9,0px], [10,.2px], [12, 1px], [15, 1.5px], [17, 4px], [20, 14m]]
        major_road:
            filter: { kind: major_road, $zoom: { min: 10 } }
            draw:
                roads:
                    width: [[10,1px],[20, 16m]]
        minor_road:
            filter: { kind: minor_road, $zoom: { min: 12 } }
            draw:
                roads:
                    width: [[12,0px],[16,1px],[20, 10m]]
        oneway:
            filter: { oneway: yes }
            draw: 
                roads:
                    color: red
    buildings:
        data: { source: mapzen }
        draw:
            buildings: 
                order: global.order
                color: global.pseudoRandomColor
                extrude: true
            lin:
                order: global.order_sub_1
                color: white
                width: [[15,0px],[17,1.px],[20,3px]]
                extrude: true

styles:
    tilt:
        mix: [geometry-rotation, geometry-tilt, functions-zoom ]
        animated: true
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 21.
                TILT: clamp(zoom()*HALF_PI,0.,HALF_PI-.6)
                ROTATION_RANGE: zoom()*HALF_PI
    lin:
         base: lines
         mix: [tilt]

    grid:
        mix: [tilt, space-tile]
        shaders:
            blocks:
                global: |
                    //  Simple Grid
                    //=============================
                    float grid(in vec2 st, in float res, in float press){
                        st = fract(st*res);
                        return 1.0-(step(press*res,st.x) * step(press*res,st.y));
                    }
                    float grid(in vec2 st, in float res){
                        return grid(st,res,0.005);
                    }
                    // GridTile
                    //=============================
                    vec3 TileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        vec3 color = vec3(0.0);
                        float press = 0.5+(1.0-fract(u_map_position.z))*0.1;
                        color += vec3(0.1,0.,0.)*grid(st,0.02,press);
                        color += vec3(0.5,0.,0.)*grid(st,0.01,press);
                        color += 0.1*grid(st,0.1,press);
                        return color;
                    }
                    vec3 TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
    roads:
        base: lines
        mix: [tilt, generative-random, functions-aastep]
        animated: true
        texcoords: true
        shaders:
            blocks:
                global: |
                    float randomSerie(float x, float freq, float t) {
                        return aastep(.8,random( floor(x*freq)-floor(t) ));
                    }
                color: |
                    vec2 st = fract(v_texcoord.xy*vec2(1.,.1));
                    float t = 22.*u_time;
                    float freq = 100.;
                    if ( v_color.r < 0.5) {
                        float cols = 2.;
                        if (fract(st.x*cols* 0.5) < 0.5){
                            t *= -1.0;
                        }
                    }
                    float offset = 0.025;
                    color.r = randomSerie(st.y, freq, t+offset);
                    color.g = randomSerie(st.y, freq, t);
                    color.b = randomSerie(st.y, freq, t-offset);
                    
                    color.rgb *= step(0.15,st.x)-step(0.85,st.x);
                    //color.rgb += 1.-clamp(step(0.04,st.x)-step(0.96,st.x),0.,1.);

    simpleGrid:
        base: polygons
        mix: [grid, generative-random]
        animated: false
        shaders:
            blocks:
                color: |
                    color.rgb *= TileGrid();
                    vec2 st = u_tile_origin.xy+floor(getTileCoords()*2.);
                    float t = u_time*.8+random(st);
                    float time_i = floor(t);
                    float time_f = fract(t);
                    color.rgb += step(0.9,random(st+time_i))*(1.0-time_f);
    numericGrid:
        base: polygons
        mix: [grid, generative-random]
        animated: true
        shaders:
            blocks:
                global: |
                    float bin(vec2 ipos, float n){
                        float remain = mod(n,33554432.);
                        for(float i = 0.0; i < 25.0; i++){
                            if ( floor(i/3.) == ipos.y && mod(i,3.) == ipos.x ) {
                                return step(1.0,mod(remain,2.));
                            }
                            remain = ceil(remain/2.);
                        }
                        return 0.0;
                    }
                    float char(vec2 st, float n){
                        st.x = st.x*2.-0.5;
                        st.y = st.y*1.2-0.1;
                        vec2 grid = vec2(3.,5.);
                        vec2 ipos = floor(st*grid);
                        n = floor(mod(n,10.));
                        float digit = 0.0;
                        if (n < 1. ) { digit = 31600.; } 
                        else if (n < 2. ) { digit = 9363.0; } 
                        else if (n < 3. ) { digit = 31184.0; } 
                        else if (n < 4. ) { digit = 31208.0; } 
                        else if (n < 5. ) { digit = 23525.0; } 
                        else if (n < 6. ) { digit = 29672.0; } 
                        else if (n < 7. ) { digit = 29680.0; } 
                        else if (n < 8. ) { digit = 31013.0; } 
                        else if (n < 9. ) { digit = 31728.0; } 
                        else if (n < 10. ) { digit = 31717.0; }
                        float pct = bin(ipos, digit);
                        vec2 borders = vec2(1.);
                        // vec2 fpos = fract(st*grid);
                        // borders *= step(0.01,fpos.x) * step(0.01,fpos.y);   // inner
                        borders *= step(0.0,st)*step(0.0,1.-st);            // outer
                        return step(.5,1.0-pct) * borders.x * borders.y;
                    }
                    float box(in vec2 st, in vec2 size){
                        size = vec2(0.5) - size*0.5;
                        vec2 uv = smoothstep(size,
                                            size+vec2(0.001),
                                            st);
                        uv *= smoothstep(size,
                                        size+vec2(0.001),
                                        vec2(1.0)-st);
                        return uv.x*uv.y;
                    }
                    float cross(in vec2 st, vec2 size){
                        return  clamp(box(st, vec2(size.x*0.5,size.y*0.125)) +
                                box(st, vec2(size.y*0.125,size.x*0.5)),0.,1.);
                    }
                color: |
                    vec2 st = getTileCoords();
                    color.rgb = TileGrid();
                    float zoom = 0.0001+fract(u_map_position.z);
                    // Crosses
                    vec2 crosses_st = st + .5;
                    vec2 crosses_st_f = fract(crosses_st);
                    color.rgb *= 1.-cross(crosses_st_f,vec2(.08)*(1.+(1.-zoom)));
                    color.rgb += vec3(.9)*cross(crosses_st_f,vec2(.05)*(1.+(1.-zoom)));
                    
                    // Digits
                    vec2 digits_st = mod(st*(30.+30.*zoom),60.);
                    vec2 digits_st_i = floor(digits_st);
                    if (digits_st_i.y == 1. &&
                        digits_st_i.x > 0. && digits_st_i.x < 7. ) {
                        vec2 digits_st_f = fract(digits_st);
                        float x = u_tile_origin.x+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_st_i.x);
                        // pct = 100.*random(digits_st_i+floor(crosses_st)+floor(u_time*20.));
                        color.rgb += vec3(char(digits_st_f,pct));
                    } else if ( digits_st_i.y == 2. &&
                                digits_st_i.x > 0. && digits_st_i.x < 8. ) {
                        vec2 digits_st_f = fract(digits_st);
                        float x = u_tile_origin.y+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_st_i.x);
                        // pct = 100.*random(digits_st_i+floor(crosses_st)+floor(u_time*20.));
                        color.rgb += vec3(char(digits_st_f,pct));
                    }
    buildings:
        base: polygons
        mix: [tilt, generative-random, color-tools, geometry-normal, functions-aastep]
        texcoords: true
        shaders:
            blocks:
                global: |
                    float pattern(vec2 st, vec2 v, float t) {
                        vec2 p = floor(st+v);
                        return step(t, random(100.+p*.000001)+random(p.x)*0.5 );
                    }
                color: |
                    if (isWall()) {
                        float r = random(getBrightness(color.rgb));
                        float amount = 0.5+random(color.rg)*0.5;
                        
                        if ( r > .3) {
                            // DeFrag
                            vec2 st = v_texcoord.xy;
                            st.y *= 1.+amount*2.;
                            st.y = fract(st.y);
                            st *= vec2(50.0,10.);
                            
                            vec2 ipos = floor(st);
                            ipos += vec2(0.,floor(v_texcoord.y*(1.+amount*5.)));
                            
                            // Random Cells
                            vec2 vel = floor(vec2(u_time*6.)); // time
                            vel *= vec2(-1.,0.); // direction
                            vel *= (step(1., mod(ipos.y,2.0))-0.5)*2.; // Oposite directions
                            vel *= random(ipos.y); // random speed
                            // 100%
                            float t = mod(u_time*20.*(1.+r*.5)+(4324.*amount),500.);
                            vec2 head = vec2(mod(t,50.), floor(t/50.));
                            
                            float pct = 1.0;
                            pct *= step(10.-head.y,ipos.y);// Y
                            pct += (1.0-step(head.x,ipos.x))*step(10.-head.y,ipos.y+1.);   // X
                            pct = clamp(pct,0.,1.);
                            color.rgb = vec3(pct);
                            
                            // Assign a random value base on the integer coord
                            color.rgb *= vec3(random(floor(st+vel)));

                            //vec2 offset = vec2(0.1,0.);
                            //color.r *= random(floor(st+vel+offset));
                            //color.b *= random(floor(st+vel-offset));
                            color.rgb = smoothstep(0.,amount,color.rgb*color.rgb);
                            //  Margin
                            color.rgb *= step(.1,fract(st.x+vel.x))*step(.1,fract(st.y+vel.y));
                        } else {
                            // Running lines
                            vec2 st = vec2(v_texcoord.x,worldPosition().z*0.005); 
                            vec2 grid = vec2(100.0,20.);
                            st *= grid;
                            vec2 ipos = floor(st);  // integer
                            vec2 fpos = fract(st);  // fraction
                            vec2 vel = vec2(u_time*max(grid.x,grid.y)); // time
                            vel *= vec2(-1.,0.0) * random(1.0+ipos.y); // direction
                            
                            // Assign a random value base on the integer coord
                            color.rgb = vec3(pattern(st,vel,amount));

                            //vec2 offset = vec2(0.1,0.);
                            //color.r = pattern(st+offset,vel,amount);
                            //color.b = pattern(st-offset,vel,amount);
                            color.rgb *= step(0.2,fpos.y);
                        }
                    } else {
                        color.rgb = vec3(0.);
                    }