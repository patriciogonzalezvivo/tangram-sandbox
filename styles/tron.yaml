# Author @patriciogv - 2015
import:
    - default.yaml
    - https://tangrams.github.io/blocks/generative/random.yaml
    - https://tangrams.github.io/blocks/space/tile.yaml
    - https://tangrams.github.io/blocks/geometry/normal.yaml
    - https://tangrams.github.io/blocks/shapes/cross.yaml

scene:
    background:
        color: black

layers:
    water:
        data: { source: mapzen }
        draw:
            water:
                color: [0,0,0]
    earth:
        data: { source: mapzen }  
        draw:
            lines:
                order: global.order-top
                color: [0.654,0.897,1.000]
                width: 2px
            earth:
                color: [0.101,0.203,0.203]
    landuse:
        data: { source: mapzen }
        draw:
            landuse:
                color: '#ff00ff'
    roads:
        data: { source: mapzen }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                color: [0, 0, 0]
        oneway:
            filter: { oneway: yes }
            draw: 
                roads: 
                    color: red
    buildings:
        data: { source: mapzen }
        draw:
            buildings:
                order: global.order
                color: [0, 0, 0]
                extrude: true
            baseline:
                style: lines
                order: global.order
                width: [[12, .1px], [18, 0.5m]]
                color: [0.654,0.897,1.000]
            buildingsLines:
                order: global.order-top
                width: [[12, .1px], [14, 0.1px], [15, 0.5px], [17, 1.0px], [18, 1px]]
                extrude: true
                color: [0.654,0.897,1.000]
    places:
        data: { source: mapzen }
        filter: { name: true }
        draw:
            text:
                font:
                    family: Helvetica
                    size: 18px
                    weight: bold
                    fill: black
                    stroke: { color: white , width: 5 }

styles:
    grid:
        lighting: false
        mix: [space-tile]
        shaders:
            blocks:
                global: |
                    // Grids
                    //=============================
                    bool gridLine(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    float TileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (gridLine(st,0.01,press)) pct += 0.5;
                        if (gridLine(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
                    float grid (in vec2 _pos, in float _zoom, in float _lineWidth){
                        _pos = fract(_pos*_zoom);
                        vec2 g = smoothstep(vec2(0.5-_lineWidth),vec2(0.5),_pos) -
                                 smoothstep(vec2(0.5),vec2(0.5+_lineWidth),_pos);
                        return clamp(g.x+g.y,0.0,1.0);
                    }
    earth:
        base: polygons
        mix : grid
        lighting: false
        shaders:
            blocks:
                filter: |
                    vec2 pos = getTileCoords()*2.;
                    color.rgb = v_color.rgb*grid(pos,10.,0.05);
    landuse:
        base: polygons
        lighting: false
        mix: earth
    water:
        base: polygons
        mix: [space-tile, shapes-cross]
        lighting: false
        shaders:
            blocks:
                filter: |
                    vec2 pos = getTileCoords()*3.;
                    float pct = clamp(cross(fract(pos),vec2(0.03,0.008)),0.0,1.0);
                    color.rgb = mix(vec3(0.051,0.071,0.278),vec3(0.654,0.897,1.000),pct);
    roads:
        base: lines
        animated: true
        texcoords: true
        lighting: false
        lighting: false
        shaders:
            blocks:
                global: |
                    float getHatch(in vec2 _pos, float _angle, float _brigtness){
                        _pos *= 20.;
                        _pos = _pos.yx;
                        return 1.0-smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                filter: |
                    vec2 st = fract(v_texcoord.xy*vec2(1.,.1));
                    float dir = -0.1;
                    if ( v_color.r < 0.5) {
                        if (st.x < 0.5) {
                          dir *= -1.;
                        }
                        st.x = fract(st.x*2.0);
                    }
                    float pattern = getHatch( u_time*dir+st.xy*0.5, 3.1415*0.5, 0.5);
                    color.rgb = vec3(1.000,0.865,0.387)* pattern*sin(smoothstep(0.0,1.,st.x)*3.1415);
    buildings:
        base: polygons
        mix: grid
        texcoords: true
        blend: add
        lighting: false
        shaders:
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                filter: |
                    float pct = grid(v_texcoord,10.,0.1)*0.5;
                    color.rgb = mix(vec3(0.051,0.071,0.278)*0.8,vec3(0.239,0.431,0.718)*0.6,pct)*0.5;
    buildingsLines:
        base: lines
        lighting: false
        shaders:
            blocks:
                width: |
                    width *= 0.2+min(pow(position.z*0.006,2.),.6);
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
