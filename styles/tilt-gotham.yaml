# Author @patriciogv - 2015

import:
    - https://tangrams.github.io/blocks/global.yaml
    - https://tangrams.github.io/blocks/functions/zoom.yaml
    - https://tangrams.github.io/blocks/geometry/normal.yaml
    - https://tangrams.github.io/blocks/geometry/tilt.yaml
    - https://tangrams.github.io/blocks/geometry/rotation.yaml
    - https://tangrams.github.io/blocks/generative/noise.yaml
    - https://tangrams.github.io/blocks/filter/grain.yaml
    - https://tangrams.github.io/blocks/polygons/windows.yaml
    - https://tangrams.github.io/blocks/polygons/glass-walls.yaml
    - https://tangrams.github.io/blocks/fx/water.yaml
    - https://tangrams.github.io/blocks/filter/grain.yaml
    
sources:
    osm:
        type: TopoJSON
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-JUsa0Gc

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -1000]
lights:
    directional:
        type: directional
        direction: [0.293,-0.861,-0.415]
        ambient: .5
        diffuse: .9
        specular: 1.
    point:
        type: point
        position: [0, -100, 0px]
        origin: ground
        ambient: .2
        diffuse: .2
        specular: .5
scene:
    background:
        color: [0.114, 0.114, 0.114]

layers:
    earth:
        data: { source: osm }
        draw:
            earth:
                order: global.order
                color: '#555'
    landuse:
        data: { source: osm }
        draw:
            earth:
                order: global.order
                color: '#666'
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: '#555'
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        properties: { width: 3 }
        draw:
            roads:
                order: global.order
                color: black
                width: 15
        oneway:
            filter: { oneway: yes }
            draw: { roads: { color: red } }
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        offices:
            filter: function(){ return feature.height > 100; }
            draw:
                polygons:
                    style: offices
                    extrude: true
                    order: global.order
                    color: '#999'
        apartments:
            filter: function(){ return feature.height < 100; }
            draw:
                polygons:
                    style: apartments
                    extrude: true
                    order: global.order
                    color: '#999'
        modern:
            filter: { kind: museum, $zoom: { min: 10 } }
            draw:
                polygons:
                    style: modern-buildings
                    extrude: true
                    order: global.order
                    color: '#999'

styles:
    tilt:
        mix: [geometry-rotation, geometry-tilt, functions-zoom ]
        animated: true
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 21.
                TILT: clamp(zoom()*HALF_PI,0.,HALF_PI-.6)
                ROTATION_RANGE: zoom()*HALF_PI

    earth:
        base: polygons
        mix: [tilt, filter-grain]
    water:
        base: polygons
        mix: [tilt, fx-water, filter-grain]
        animated: true
        material:
            ambient: 0.8

    buildings:
        texcoords: true
        base: polygons
        mix: [tilt, polygons-windows, filter-grain]

    apartments:
        base: polygons
        mix: [tilt, polygons-windows, filter-grain]
        
    offices:
        base: polygons
        mix: [tilt,  polygons-glass-walls, filter-grain]

    modern-buildings:
        base: polygons
        mix: [tilt, geometry-normal, filter-grain]
        texcoords: true
        material:
            shininess: 2.
            specular: 1.0
            ambient: [0.000, 0.000, 0.000]
            emission: 0.0
        shaders:
            blocks:
                global: |
                    vec3 voronoi (vec2 st) {
                        vec2 ipos = floor(st);
                        vec2 fpos = fract(st);
                        vec3 m = vec3( 8.0 );
                        for( int j=-1; j<=1; j++ ){
                            for( int i=-1; i<=1; i++ ){
                                vec2  g = vec2( float(i), float(j) );
                                vec2  o = random2( ipos + g );
                                vec2  r = g - fpos + o;
                                float d = dot( r, r );
                                if( d<m.x )
                                    m = vec3( d, o );
                            }
                        }
                        return m;
                    }
                color: |
                    if (isWall()){
                        vec2 st = vec2(v_texcoord.x*10.,worldPosition().z*0.2);
                        float scale = 0.8;
                        
                        vec3 c = voronoi(st*scale);
                        vec3 col = 0.6 + cos( c.y*0.6 + vec3(1.5) );
                        vec2 e = vec2( 2.0, 0.0 )/vec2(50.);
                        vec3 ca = voronoi( scale*(st + e.xy) );
                        vec3 cb = voronoi( scale*(st + e.yx) );
                        col *= 1.0 - clamp( abs(2.0*c.z-ca.z-cb.z)*1000.0,0.0,1.0);
                        
                        material.specular = vec4(0.957,0.988,0.976,1.0) * step(0.1,col.r);
                        material.emission = vec4(0.857,0.888,0.980,1.0) * smoothstep(0.9,1.,col.r * 2.);
                    }
    roads:
        texcoords: true
        base: lines
        mix: [tilt, filter-grain]
        animated: true
        texcoords: true
        material:
            diffuse: .9
            emission: 0.0
        shaders:
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy*vec2(1.,.1));
                    float dir = -0.1;
                    if ( v_color.r < 0.5) {
                       if (st.x < 0.5) {
                         st.y = 1.-st.y;
                       }
                       st.x = fract(st.x*2.0);
                    }
                    float v = u_time*dir;
                    st *= vec2(4.,1.);
                    st += vec2(1.);
                    vec2 ipos = floor(st);
                    vec2 fpos = fract(st);
                    fpos = fpos+vec2(.0,v*random(ipos.x));
                    ipos = floor(fpos*vec2(10.));
                    fpos = fract(fpos*vec2(1.,10.));
                    
                    st = worldPosition().xy*0.04;
                    float n = noise(st);
                    
                    material.emission = vec4(0.957,0.988,0.976,1.0) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.5,random(ipos.y)));
                    
                    float lineWidth = 0.2;

                    float borders = 1.0-(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    material.emission *= 1.-borders;
                    
                    color.rgb = vec3(0.4)*borders+n;

    

        