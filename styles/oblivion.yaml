# Author @patriciogv - 2015

import:
    - https://tangrams.github.io/blocks/generative/noise.yaml
    - https://tangrams.github.io/blocks/space/screen.yaml
    - https://tangrams.github.io/blocks/space/constant.yaml
    - https://tangrams.github.io/blocks/patterns/stripes.yaml
    - https://tangrams.github.io/blocks/geometry/tilt.yaml
    - https://tangrams.github.io/blocks/geometry/rotation.yaml
    - https://tangrams.github.io/blocks/shapes/cross.yaml
    - https://tangrams.github.io/blocks/functions/zoom.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc

textures:
    sem:
        url: imgs/sem-sky-0001.jpg

scene:
    background:
        color: black

cameras:
    cam:
        type: perspective
        vanishing_point: [0, -500]

lights:
    dir:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .5
        ambient: .5
    
global:
    order: function () { return feature.sort_key; }

layers:
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: [0.910, 0.910, 0.910]
            flat:
                order: 0
                color: [0.129, 0.129, 0.129]
    earth:
        data: { source: osm }
        draw:
            pol:
                order: global.order
                color: [0.348,0.348,0.348]
            flat:
                order: 0
                color: [0.129, 0.129, 0.129]
    landuse:
        data: { source: osm }
        draw:
            area:
                order: global.order
                color: [1.000,0.014,0.187]
    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: global.order
                color: '#999'
                extrude: true
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            lin:
                order: global.order
                color: '#777'
                width: 5

styles:
    tilt-rotate:
        mix: [functions-zoom, geometry-rotation, geometry-tilt]
        shaders:
            defines:
                ZOOM_START: 10.
                ZOOM_END: 20.
                TILT: zoom()*PI
                ROTATION_RANGE: zoom()*HALF_PI
    overlay_grid:
        mix: [space-screen, shapes-cross, generative-random]
        shaders:
            blocks:
                global: |
                    float bin(vec2 ipos, float n){
                        float remain = mod(n,33554432.);
                        for(float i = 0.0; i < 25.0; i++){
                            if ( floor(i/3.) == ipos.y && mod(i,3.) == ipos.x ) {
                                return step(1.0,mod(remain,2.));
                            }
                            remain = ceil(remain/2.);
                        }
                        return 0.0;
                    }

                    float char(vec2 st, float n){
                        st.x = st.x*2.-0.5;
                        st.y = st.y*1.2-0.1;

                        vec2 grid = vec2(3.,5.);

                        vec2 ipos = floor(st*grid);
                        vec2 fpos = fract(st*grid);

                        n = floor(mod(n,10.));
                        float digit = 0.0;
                        if (n < 1. ) { digit = 31600.; }
                        else if (n < 2. ) { digit = 9363.0; }
                        else if (n < 3. ) { digit = 31184.0; }
                        else if (n < 4. ) { digit = 31208.0; }
                        else if (n < 5. ) { digit = 23525.0; }
                        else if (n < 6. ) { digit = 29672.0; }
                        else if (n < 7. ) { digit = 29680.0; }
                        else if (n < 8. ) { digit = 31013.0; }
                        else if (n < 9. ) { digit = 31728.0; }
                        else if (n < 10. ) { digit = 31717.0; }
                        float pct = bin(ipos, digit);

                        vec2 borders = vec2(1.);
                        // borders *= step(0.01,fpos.x) * step(0.01,fpos.y);   // inner
                        borders *= step(0.0,st)*step(0.0,1.-st);            // outer

                        return step(.5,1.0-pct) * borders.x * borders.y;
                    }

                    float gridF(vec2 st, float res){
                        vec2 grid = fract(st*res);
                        return 1.-(step(0.005,grid.x) * step(0.005,grid.y));
                    }

                filter: |
                    vec2 xy = getScreenNonStretchCoords();
                    xy *= 2.;
                    
                    vec3 overlayGrid = vec3(0.0);
                    
                    // Grid
                    vec2 grid_xy = xy*300.;
                    overlayGrid += vec3(0.620,0.722,0.694)*gridF(grid_xy,0.01)*0.5;
                    overlayGrid += vec3(0.620,0.722,0.694)*gridF(grid_xy,0.02)*0.25;
                    // overlayGrid += vec3(0.2)*gridF(grid_xy,0.1);
                    overlayGrid *= .5;

                    // // Crosses
                    vec2 crosses_xy = xy + .5;
                    crosses_xy *= 3.;
                    vec2 crosses_xy_f = fract(crosses_xy);
                    overlayGrid *= 1.-clamp(cross(crosses_xy_f,vec2(.2,.2)),0.,1.);
                    overlayGrid += vec3(1.000,.7,0.)*clamp(cross(crosses_xy_f,vec2(.05,.01)),0.,1.);

                    // // Digits
                    vec2 digits_xy = mod(xy*90.,30.);
                    vec2 digits_xy_i = floor(digits_xy);
                    if (digits_xy_i.y == 1. &&
                        digits_xy_i.x > 0. && digits_xy_i.x < 8. ) {
                        vec2 digits_xy_f = fract(digits_xy);
                        float x = u_tile_origin.y;//+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_xy_i.x);
                        // float pct = random(digits_xy_i+floor(crosses_xy)+floor(u_time*20.));
                        overlayGrid += vec3(0.620,0.722,0.694)*char(digits_xy_f,100.*pct);
                    } else if (digits_xy_i.y == 2. &&
                        digits_xy_i.x > 0. && digits_xy_i.x < 6. ) {
                        vec2 digits_xy_f = fract(digits_xy);
                        float x = u_tile_origin.x;//+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_xy_i.x);
                        // float pct = random(digits_xy_i+floor(crosses_xy)+floor(u_time*20.));
                        overlayGrid += vec3(0.620,0.722,0.694)*char(digits_xy_f,100.*pct);
                    }
                    color.rgb += overlayGrid*.4;                    
    lin:
        base: lines
        mix: [tilt-rotate, overlay_grid]
    pol:
        base: polygons
        mix: [tilt-rotate, overlay_grid]

    flat:
        base: polygons
        mix: [overlay_grid]
        shaders:
            blocks: 
                position: 
                    position.z = -3000.;
                    position.xy *= 100.;

    water:
        base: polygons
        mix: [pol, generative-noise]
        animated: true
        material:
            ambient: [0.812, 0.812, 0.812]
            diffuse:
                texture: sem
                mapping: spheremap
        shaders:
            blocks:
                normal: |
                    normal += snoise( vec3(worldPosition().xy*0.08,u_time*.5) )*0.02;
    buildings:
        base: polygons
        mix: pol
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
    area:
        base: polygons
        mix: pol
        lighting: false
        blend: inlay
        shaders:
            blocks:
                global: |
                    mat2 rotate2d(float angle){
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    float stripes(vec2 st){
                        st = rotate2d(3.14159265358*-0.25 )*st;
                        return step(.9,1.0-smoothstep(.5,1.,abs(sin(st.x*3.14159265358))));
                    }
                color: |
                    const float pixel_scale = 695.;
                    float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                    vec2 st = gl_FragCoord.xy/pixel_scale;
                    const float dot_wrap = 1000.;
                    st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                    
                    color = mix(color,vec4(0.),stripes(st*100.))*.8;