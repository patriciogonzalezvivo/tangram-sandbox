# Author @patriciogv - 2016

sources:
    mapzen:
        type: TopoJSON
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-JUsa0Gc
    billboard:
        type: GeoJSON
        url: //52.70.150.13/data/water.json
cameras:
    perspective:
        type: perspective
styles:
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords () {
                        return fract(v_pos.xy);
                    }
                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    grids-grid:
        shaders:
            blocks:
                global: |
                    // Draw a grid in the space a specific resolution and pressition
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    //
                    // Draw a grid in the space a specific resolution
                    bool grid(vec2 st, float res){
                        return grid(st, res, 1.0);
                    }
    grids-tile:
        mix: [space-tile,grids-grid]
        shaders:
            blocks:
                global: |
                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid(){ 
                        return mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); 
                    }
    grid:
        base: polygons
        mix: [grids-tile, filter-grain]
        shaders:
            blocks:
                color: |
                    color.rgb += vec3(.2)*tileGrid();
    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random(float x){ return fract(sin(x)*43758.5453);}
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) { return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453); }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) { return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453); }
                    vec3 random3 (vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat4 view_frustum(
                        float angle_of_view,
                        float aspect_ratio,
                        float z_near,
                        float z_far
                    ) {
                        return mat4(
                            vec4(1.0/tan(angle_of_view),           0.0, 0.0, 0.0),
                            vec4(0.0, aspect_ratio/tan(angle_of_view),  0.0, 0.0),
                            vec4(0.0, 0.0,    (z_far+z_near)/(z_far-z_near), 1.0),
                            vec4(0.0, 0.0, -2.0*z_far*z_near/(z_far-z_near), 0.0)
                        );
                    }

                    mat4 scale(float x, float y, float z) {
                        return mat4(
                            vec4(x,   0.0, 0.0, 0.0),
                            vec4(0.0, y,   0.0, 0.0),
                            vec4(0.0, 0.0, z,   0.0),
                            vec4(0.0, 0.0, 0.0, 1.0)
                        );
                    }

                    mat4 translate(float x, float y, float z) {
                        return mat4(
                            vec4(1.0, 0.0, 0.0, 0.0),
                            vec4(0.0, 1.0, 0.0, 0.0),
                            vec4(0.0, 0.0, 1.0, 0.0),
                            vec4(x,   y,   z,   1.0)
                        );
                    }

                    mat4 rotateX(float theta) {
                        return mat4(
                            vec4(1.0,         0.0,         0.0, 0.0),
                            vec4(0.0,  cos(theta),  sin(theta), 0.0),
                            vec4(0.0, -sin(theta),  cos(theta), 0.0),
                            vec4(0.0,         0.0,         0.0, 1.0)
                        );
                    }
                    mat4 rotateY(float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat4 rotateZ (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
                    
                    float shape(vec2 st, int N){
                        st = st *2.-1.;
                        float a = atan(st.x,st.y)+PI;
                        float r = TWO_PI/float(N);
                        return cos(floor(.5+a/r)*r-a)*length(st);
                    }
    billboard:
        mix: [space-tile, generative-random, geometry-matrices]
        animated: true
        shaders:
            defines:
                PI: 3.14159265358979323846
                TWO_PI: 6.283185307
            blocks:
                global: |
                    #ifdef TANGRAM_VERTEX_SHADER
                    mat4 rotationMatrix(float Z) {
                        vec3 mid = TANGRAM_TILE_SCALE*.5;
                        return translate(mid.x,-mid.y,0.) * rotateZ(Z*PI*.5) * translate(-mid.x,mid.y,0.);
                    }
                    #endif
                position: |
                    float t = (60.0+u_time)*.1*(.5+random(u_tile_origin.xy)*.5);
                    float Z = floor(t);
                    position = rotationMatrix(Z) * vec4(SHORT(a_position.xyz),1.);
    billboardPly:
        base: polygons
        mix: billboard
        shaders:
            blocks:
                position: |
                    position = u_modelView * position;
    billboardLns:
        base: lines
        mix: billboard
        shaders:
            blocks:
                position: |
                    extrude = (rotationMatrix(Z) * vec4(SCALE_8(a_extrude.xy),0.,0.)).xy;
                    width = SHORT(a_extrude.z);
                    dwdz = SHORT(a_extrude.w);
                    dz = clamp(u_map_position.z - abs(u_tile_origin.z), 0.0, 1.0);
                    width += dwdz * dz;
                    width *= exp2(-dz);
                    position.xy += extrude * width;
                    position = u_modelView * position;
layers:
    water:
        data: { source: billboard }
        draw:
            grid:
                order: 0
                color: [0.106, 0.106, 0.106]
    earth:
        data: { source: mapzen }
        draw:
            billboardPly:
                order: 1
                color: [0.333, 0.333, 0.333]
    boundaries:
        data: { source: mapzen }
        draw:
            billboardLns:
                order: 2
                color: white
                width: 1px
    roads:
        data: { source: mapzen }
        draw:
            billboardLns:
                order: 3
                color: gray
                width: 1px