# Author @patriciogv - 2015

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
# scene:
#     background:
#         color: [0.,0.5,0.8]
styles:
    tilt:
        animated: true
        shaders:
            blocks:
                global: |
                    mat3 rotateX3D(float phi){
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateZ3D(float psi){
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                position: |
                    float t = u_time*0.05; 
                    position.xyz = rotateX3D(abs(cos(t))) * rotateZ3D(abs(sin(t))*.5) * position.xyz;
    overlay_grid:
        shaders:
            blocks:
                global: |
                    float getIntensity(vec3 a){ return (a.x+a.y+a.z)/3.0; }
                    float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float noise(vec2 x) {
                        vec2 i = floor(x);
                        vec2 f = fract(x);

                        float a = hash(i);
                        float b = hash(i + vec2(1.0, 0.0));
                        float c = hash(i + vec2(0.0, 1.0));
                        float d = hash(i + vec2(1.0, 1.0));

                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float fbm( in vec2 p ){
                        float s = 0.0;
                        float m = 0.0;
                        float a = 0.5;
                        for(int i=0; i<2; i++ ){
                            s += a * noise(p);
                            m += a;
                            a *= 0.5;
                            p *= 2.0;
                        }
                        return s/m;
                    }
                    bool grid(vec2 _pos, float _res){
                        vec2 grid = fract(_pos*_res);
                        return grid.x < _res || grid.y < _res;
                    }
                    vec3 BluePrint(vec2 _pos){
                        vec2 st = _pos/u_resolution.xy-vec2(.5);
                        vec3 background = mix(  vec3(0.,0.5,0.8),
                                                vec3(0.,0.0,0.3),
                                                dot(st,st) + (fbm(_pos*0.6)*0.1) );
                        if(grid(_pos,0.01)){
                            background += vec3(0.05);
                        }

                        if(grid(_pos,0.1)){
                            background += vec3(0.02);
                        }

                        return background;
                    }
                filter: |
                    color.rgb += BluePrint(gl_FragCoord.xy);
    lin:
        base: lines
        mix: tilt
    pol:
        base: polygons
        mix: tilt
    flat:
        base: polygons
        mix: overlay_grid
        shaders:
            blocks: 
                position: | 
                    position.z = -1000.;
                    position.xy *= 200.;
                color: |
                    color.rgb = vec3(0.);
    blueprint:
        mix: [overlay_grid,tilt]
        base: polygons
    base:
        base: polygons
        mix: blueprint

    buildings:
        base: polygons
        mix: blueprint
        texcoords: true
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    float aastep(float threshold, float value) {
                      #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                        float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                      #else
                        return step(threshold, value);
                      #endif  
                    }
                    float pulse(float x,float p, float w){
                        x = abs(x - p);
                        if( x>w ) return 0.0;
                        x /= w;
                        return 1.0 - x*x*(3.0-2.0*x);
                    }
                    #endif
                color: |
                    if (dot(v_normal,vec3(0.,0.,1.)) == 0.0){
                        float lineWidth = 0.002*(u_tile_origin.z/20.0);
                        color.rgb = 1.0-vec3(max(aastep(lineWidth,v_texcoord.x)-aastep(1.0-lineWidth,v_texcoord.x),0.));
                    }
    buildingsLines:
        base: lines
        mix: blueprint
        shaders:
            blocks:
                width: |
                    width *= 0.2+min(pow(position.z*0.006,2.),.6);
    roads:
        base: lines
        mix: blueprint
        texcoords: true
        shaders:
            blocks:
                color: |
                    float lineWidth = 0.1;
                    float pct = 1.0-(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    color.rgb = vec3(0.14+pct*0.1); 
sources:
    mapzen:
        type: TopoJSON
        url:  tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-JUsa0Gc
layers:
    water:
        data: { source: mapzen }
        draw:
            base:
                order: 3
                color: [.1,.1,.1]
    earth:
        data: { source: mapzen }
        draw:
            lin:
                order: 5
                width: 1.5px
                color: '#C1D3DC' 
            base:
                order: 1
                color: [0.080,0.080,0.080]
            flat:
                order: 0
                color: [0,0,0]
    landuse:
        data: { source: mapzen }
        draw:
            lin:
                order: 3
                width: 0.5px
                color: white 
            base:
                order: 2
                color: [0.116,0.116,0.116]
            flat:
                order: 0
                color: [0,0,0]
    roads:
        data: { source: mapzen }
        filter: { not: { kind: [rail, ferry] } }
        properties: { width: 3 }
        draw:
            roads:
                order: 5
                color: '#C1D3DC'
                width: 6
    buildings:
        data: { source: mapzen }
        filter: { $zoom: { min: 10 } }
        draw:
            buildings:
                order: 7
                color: [.05,.05,0.05]
            baseline:
                style: lin
                order: 7
                width: [[12, .1px], [18, 1.0m]]
                color: '#C1D3DC'
        extruded:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
                buildingsLines:
                    order: 6
                    color: white
                    width: [[12, 1px], [14, 2px], [15, 3px], [18, 4px]]
                    extrude: true
                buildingsTopLines:
                    style: buildingsLines
                    order: 8
                    color: [0.565, 0.565, 0.565]
                    width: [[12, .1px], [14, .25px], [15, .5px], [18, .75px]]
                    extrude: true